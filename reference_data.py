import pandas as pd


# Таблица 3 - Величины коэффициентов A1, A2, B1, B1, C3
tbl_3 = {
    "конвекция": {
        "A1": 0.112,
        "A2": 0.000920,
        "B1": 0.920,
        "B2": 0.718,
        "C3": 0.11,
    },
    "изотермия": {
        "A1": 0.098,
        "A2": 0.00135,
        "B1": 0.889,
        "B2": 0.688,
        "C3": 0.08,
    },
    "инверсия": {
        "A1": 0.0609,
        "A2": 0.00196,
        "B1": 0.895,
        "B2": 0.684,
        "C3": 0.06,
    },
}

tbl_3_df = pd.DataFrame.from_dict(tbl_3, orient='index')

# Таблица 4 - Величины коэффициентов С1, С2 , D1, D2
tbl_4 = {
    0.01: {"C1": 1.56, "C2": 0.000625, "D1": 0.048, "D2": 0.45},
    0.04: {"C1": 2.02, "C2": 0.000776, "D1": 0.027, "D2": 0.37},
    0.1: {"C1": 2.73, "C2": 0, "D1": 0, "D2": 0},
    0.4: {"C1": 5.16, "C2": 0.0538, "D1": -0.098, "D2": 0.225},
    1: {"C1": 7.37, "C2": 0.000233, "D1": -0.0096, "D2": 0.6},
}

tbl_4_df = pd.DataFrame.from_dict(tbl_4, orient='index')

# Таблица 6 - Значения характеристик подстилающих поверхностей
tbl_6 = {
    "Тип поверхности": [
        "Бетон",
        "Песок",
        "Лед",
        "Асбест",
        "Асбестоцемент",
        "Асфальт",
        "Бетон на каменном щебне",
        "Медь",
        "Сталь",
        "Чугун",
    ],
    "rp": [2220, 1380, 920, 2400, 1600, 1100, 2300, 8960, 8000, 7600],
    "ap": [1.42, 0.35, 2.23, 0.35, 1.76, 0.72, 1.3, 380, 52, 56],
    "Cn": [770, 840, 2080, 800, 960, 920, 1000, 380, 500, 550],
}

tbl_6_df = pd.DataFrame(tbl_6)

# Таблица 7 - Свойства АХОВ
tbl_7 = {
    "АХОВ": [
        "Аммиак",
        "Мышьяковистый водород",
        "Фтористый водород",
        "Хлористый водород",
        "Бромистый водород",
        "Цианистый водород",
        "Сероводород",
        "Сероуглерод",
        "Формальдегид",
        "Фосген",
        "Фтор",
        "Хлор",
        "Хлорциан",
        "Окись углерода",
        "Окись этилена",
    ],
    "M": [
        17.0,
        77.9,
        20.4,
        36.5,
        80.9,
        27.0,
        34.1,
        76.1,
        30,
        98.9,
        38.0,
        70.1,
        61.5,
        28,
        44,
    ],
    "rg": [
        0.8,
        3.5,
        0.92,
        1.64,
        3.50,
        0.9,
        1.5,
        6.0,
        1.03,
        3.48,
        1.7,
        3.2,
        2.1,
        0.97,
        1.7,
    ],
    "rgid": [
        681,
        1640,
        989,
        1191,
        1490,
        689,
        964,
        1263,
        815,
        1420,
        1512,
        1553,
        1258,
        1000,
        882,
    ],
    "Tkip": [
        -33.4,
        -62.5,
        19.4,
        -85.1,
        -67.8,
        25.6,
        -60.4,
        46.2,
        -19.3,
        8.2,
        -188.0,
        -34.1,
        12.6,
        -191.6,
        10.7,
    ],
    "Cp": [
        4.6,
        0.5,
        1.42,
        0.8,
        0.36,
        1.33,
        1.04,
        0.67,
        1.32,
        0.67,
        3.32,
        0.96,
        0.73,
        1.04,
        1.72,
    ],
    "a": [
        1.34,
        1.3,
        1.3,
        1.41,
        1.42,
        1.31,
        1.3,
        1.24,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.29,
        1.3,
    ],
    "PCt50": [
        15.0,
        0.2,
        4.0,
        2.0,
        2.4,
        0.2,
        1.0,
        30.0,
        0.6,
        0.55,
        0.2,
        0.6,
        0.75,
        10.0,
        2.2,
    ],
    "LCt50": [150, 6, 40, 20, 24, 6, 15, 500, 6, 3.2, 3, 6, 11, 37.5, 25],
    "Hisp": [
        1360,
        242,
        1560,
        300,
        217,
        933,
        310,
        352,
        273,
        158,
        727,
        288,
        208,
        216,
        320,
    ],
}

tbl_7_df = pd.DataFrame(tbl_7)


def get_OHV_values(aho, parameter):
    """
    Функция для получения значения по названию АХОВ
    """
    try:
        return tbl_7_df.loc[
            tbl_7_df["АХОВ"].str.lower() == aho.lower(), parameter
        ].iloc[0]
    except IndexError:
        print(f"АХОВ '{aho}' не найден в таблице.")
        return None


def get_surface_values(surface_type):
    # Функция для получения значений 'rp', 'ap', 'Cn' по типу поверхности
    try:
        return tbl_6_df.loc[
            tbl_6_df["Тип поверхности"].str.lower() == surface_type.lower(),
            ["rp", "ap", "Cn"],
        ].iloc[0]
    except IndexError:
        print(f"Тип поверхности '{surface_type}' не найден в таблице.")


def get_coefficients_A1A2B1B2C3(condition):
    """
    Получает значения коэффициентов A1, A2, B1, B2, C3 для указанного условия.
    
    Параметры:
    condition (str): Одно из значений - "Конвекция", "Изотермия" или "Инверсия"
    
    Возвращает:
    Series: Серия с коэффициентами для указанного условия
    """
    try:
        return tbl_3_df.loc[condition]
    except KeyError:
        available_conditions = ', '.join(tbl_3_df.index)
        raise ValueError(f"Неверное условие. Доступные варианты: {available_conditions}")


def get_coefficients_C1C2D1D2(key):
    """
    Получает значения коэффициентов C1, C2, D1, D2 для указанного значения шероховатости.
    
    Параметры:
    key (float): шероховатость, м
    
    Возвращает:
    Series: Серия с коэффициентами для указанного ключа
    """
    try:
        return tbl_4_df.loc[key]
    except KeyError:
        available_keys = ', '.join(map(str, tbl_4_df.index))
        raise ValueError(f"Неверный ключ. Доступные варианты: {available_keys}")
    
    
